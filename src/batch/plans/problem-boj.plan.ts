import { Injectable } from '@nestjs/common';
import { PrismaService } from '../../prisma/prisma.service';
import { PROBLEM_BOJ } from '../constants/batch-plan.constant';
import { BatchPlanner } from '../decorators/batch-planner.decorator';
import { BatchDefinitionDto } from '../dto/batch-definition.dto';
import { BatchPlan } from '../interfaces/batch-plan.interface';

@BatchPlanner(PROBLEM_BOJ)
@Injectable()
export class ProblemBojPlan implements BatchPlan {
  constructor(private readonly prismaService: PrismaService) {}

  async plan(batchDefinition: BatchDefinitionDto) {
    const sourceIds = await this.prismaService.problemV2.findMany({
      select: {
        sourceId: true,
      },
    });

    const nonTargets = [
      1320, 1382, 1383, 1403, 1714, 1794, 1903, 1923, 1961, 1984, 2165, 2182,
      2308, 2368, 2400, 2746, 2760, 2767, 2770, 2771, 3068, 3069, 3070, 3072,
      3074, 3222, 3241, 3249, 3274, 3275, 3305, 3306, 3341, 3384, 3390, 3393,
      3397, 3401, 3402, 3403, 3404, 3465, 3524, 3775, 3776, 3791, 3815, 3816,
      3817, 3818, 3819, 3820, 3821, 3822, 3823, 3824, 3940, 3941, 3942, 4102,
      4103, 4171, 4172, 4217, 4431, 4432, 4433, 4434, 4455, 4460, 4750, 4767,
      4768, 4769, 4770, 4772, 4783, 4859, 4867, 4870, 4871, 5274, 5275, 5276,
      5277, 5278, 5279, 5280, 5281, 5282, 5283, 5284, 5285, 5286, 5287, 5288,
      5289, 5290, 5291, 5298, 5299, 5300, 5301, 5302, 5303, 5304, 5305, 5306,
      5307, 5308, 5309, 5310, 5311, 5312, 5313, 5314, 5315, 5316, 5317, 5318,
      5319, 5320, 5321, 5322, 5323, 5324, 5325, 5326, 5327, 5328, 5329, 5330,
      5331, 5332, 5333, 5334, 5335, 5336, 5510, 5511, 5512, 5513, 5514, 5515,
      5516, 5517, 5518, 5270, 5271, 5272, 5273, 5478, 5499, 5505, 5663, 5664,
      5665, 6046, 6113, 6157, 6158, 6163, 6215, 6224, 6204, 6225, 6237, 6238,
      6239, 6427, 6433, 6435, 6385, 6390, 6387, 6392, 6427, 6433, 6435, 6445,
      6447, 6469, 6471, 6472, 6453, 6459, 6466, 6822, 6867, 6883, 6914, 6922,
      6925, 6964, 6967, 7022, 7023, 7028, 7029, 7032, 7074, 7075, 7076, 7077,
      7078, 7079, 7089, 7090, 7091, 7027, 7059, 7061, 7062, 7063, 7065, 7066,
      7067, 7069, 7071, 7072, 7073, 7074, 7075, 7076, 7077, 7078, 7079, 7089,
      7090, 7092, 7099, 7100, 7101, 7102, 7103, 7104, 7105, 7282, 7283, 7284,
      7285, 7372, 7373, 7376, 7521, 7647, 7698, 7699, 7700, 7701, 7702, 7703,
      7704, 7705, 7706, 7707, 7708, 7709, 7710, 7711, 7712, 7713, 7714, 7715,
      7716, 7717, 7751, 7752, 7753, 7754, 7755, 7756, 7757, 7758, 7759, 7813,
      7832, 7834, 7835, 7836, 7837, 7838, 7833, 7814, 7815, 7816, 7817, 7818,
      7819, 7820, 7821, 7969, 7985, 7986, 7988, 7991, 8139, 8498, 8569, 9005,
      9099, 9100, 9101, 9102, 9103, 9104, 9105, 9106, 9107, 9108, 9109, 9110,
      9111, 9112, 9113, 9132, 9133, 9190, 9191, 9192, 9193, 9194, 9195, 9261,
      9262, 9408, 9409, 9410, 9412, 9415, 9416, 9417, 9418, 9419, 9420, 9421,
      9422, 9424, 9425, 9578, 9721, 9744, 9745, 9746, 9747, 9748, 9749, 9750,
      9751, 9752, 9757, 9766, 9810, 9811, 9812, 9807, 9808, 9809, 9810, 9811,
      9812, 9902, 9903, 9904, 9905, 9906, 9929, 9930, 9931, 9963, 9964, 9965,
      9966, 9967, 9968, 9969, 9970, 10002, 10115, 10577, 10578, 10579, 10580,
      10581, 10582, 10583, 10584, 10585, 10586, 10587, 10588, 10758, 10832,
      10904, 11347, 11348, 11349, 11350, 11351, 11352, 11353, 11354, 11355,
      11356, 11357, 11358, 11359, 11360, 11361, 11362, 11363, 11364, 11870,
      11885, 11886, 11887, 11888, 11889, 11890, 11891, 11892, 11893, 11894,
      11898, 11901, 11902, 11911, 11919, 12027, 12028, 12029, 12030, 12031,
      12032, 12288, 12289, 12290, 12344, 12345, 12528, 12737, 13104, 13105,
      13106, 13107, 13108, 13109, 13110, 13111, 13112, 13113, 13114, 13115,
      13508, 13885, 14015, 14016, 14017, 14018, 14019, 14020, 14021, 14022,
      14023, 14024, 14025, 14026, 14027, 14028, 14029, 14030, 14031, 13997,
      14334, 14580, 14661, 14662, 14663, 14664, 14665, 14666, 14667, 14668,
      14669, 14660, 14738, 14903, 15290, 15291, 15597, 15598, 15755, 15857,
      15950, 15951, 15959, 15960, 15884, 15895, 15952, 16962, 16963, 17061,
      17062, 17063, 17064, 17065, 17066, 17067, 17068, 17125, 17183, 17189,
      17722, 17727, 17732, 17770, 17714, 17725, 17740, 17751, 18367, 18369,
      18492, 18797, 19633, 19714, 19715, 19716, 19717, 20022, 20163, 20356,
      20357, 20371, 20392, 20393, 20404, 20406, 20407, 21689, 21690, 21693,
      21694, 21805, 21859, 22000, 22001, 22002, 22003, 22004, 22005, 22006,
      22009, 22013, 22318, 22319, 22320, 22321, 22322, 22323, 22324, 22325,
      22326, 22328, 22888, 22247, 22248, 22249, 22250, 22889, 23346, 22192,
      24203, 24204, 24205, 24206, 24207, 24208, 24209, 24210, 24211, 24212,
      24213, 24214, 24215, 24216, 24217, 24024, 24096, 24106, 24150, 24151,
      24152, 24153, 24154, 24160, 24166, 24167, 24168, 24169, 24170, 25160,
      24898, 25262, 25265, 25410, 25413, 25445, 25469, 25470, 25472, 25485,
      25486, 25507, 25526, 25411, 25455, 25680, 25681, 26116, 26120, 26121,
      26278, 26279, 26280, 26401, 26484, 26486, 26641, 26633, 26672, 26704,
      26745, 26749, 26759, 26718, 26898, 27076, 28223, 28394, 28368, 28394,
      28681, 28504, 29194, 29195, 29212, 29240, 29275, 29278, 29999, 29639,
      29806, 30115, 30116, 30117, 30118, 30119, 30120, 30121, 30122, 30197,
      30198, 30304, 30351, 30352, 30353, 30537, 31010, 31015, 31016, 31160,
      31161, 31345, 31665, 31698, 31708, 31710, 31727, 31730, 32110, 32773,
      32420, 32426, 32431, 32508, 32767, 32768, 32769, 32770, 32771, 32772,
      32773, 32774, 33343, 33570, 30537, 30978, 32273, 33921, 33922, 33937,
      33938, 33949, 33940, 33941, 33942, 33943, 33944, 33945, 33946, 33947,
      33948, 33949, 33919, 33856, 33920,
    ]; // 빈 번호 리스트6,

    const longContents = [
      7460, 6899, 9923, 9920, 10374, 12796, 19727, 19833, 20452, 20687, 23147,
      21330, 23652, 23313, 21298, 22048, 23936, 24434, 24908, 24968, 25383,
      25745, 25746, 25749, 25750, 25751, 25752, 25753, 25754, 25747, 25748,
      24838, 26862, 27171, 28002, 28012, 28013, 28383, 28700, 29007, 29008,
      28692, 29748, 29744, 29750, 33514, 33566, 32524, 31811, 30043, 30042,
      30473, 31807, 30991, 31087, 24911,
    ]; // 수식 렌더링이 너무 길게나와서 불가능한 케이스
    const hasNoImageContents = [8332]; // 이미지 엑박이라 가져오다 오류남...
    const longInputOutput = [20184, 24909]; // 입출력이 엄~청김
    const invalidTags = [
      14583, 22919, 24814, 28239, 28245, 30701, 30705, 34006, 31426,
    ]; // 태그가 이상해서 파싱이 안~됨
    const nonTargetsSet = new Set([
      ...nonTargets,
      ...longContents,
      ...hasNoImageContents,
      ...longInputOutput,
      ...invalidTags,
    ]);
    const problemNumbers = sourceIds
      .map((problem) => Number(problem.sourceId))
      .filter((num) => !isNaN(num) && num >= 1000)
      .sort((a, b) => a - b);

    const missingProblems: number[] = [];
    const targetCount = 50;

    if (problemNumbers.length === 0) {
      let current = 1000;
      let added = 0;
      while (added < targetCount && current < 34008) {
        if (!nonTargetsSet.has(current)) {
          missingProblems.push(current);
          added++;
        }
        current++;
      }
    } else {
      let current = 1000;
      let problemIndex = 0;

      while (missingProblems.length < targetCount && current < 34008) {
        while (
          problemIndex < problemNumbers.length &&
          problemNumbers[problemIndex] < current
        ) {
          problemIndex++;
        }

        if (
          (problemIndex >= problemNumbers.length ||
            problemNumbers[problemIndex] !== current) &&
          !nonTargetsSet.has(current)
        ) {
          missingProblems.push(current);
        }

        current++;
      }
    }

    return missingProblems.map((problemNo) => ({
      batchDefinitionNo: batchDefinition.no,
      state: 'PENDING',
      data: {
        source: 'acmicpc',
        sourceId: String(problemNo),
      },
    }));
  }
}
