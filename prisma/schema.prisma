// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model BatchDefinition {
  no                Int             @id @default(autoincrement()) @map("BATCH_DEFINITION_NO")
  name              String          @map("BATCH_DEFINITION_NAME")
  jobName           String          @map("BATCH_DEFINITION_JOB_NAME")
  cron              String          @map("BATCH_DEFINITION_CRON")
  description       String          @map("BATCH_DEFINITION_DESCRIPTION") @db.Text()
  createdAt         DateTime        @default(now()) @map("BATCH_DEFINITION_CREATED_AT")
  updatedAt         DateTime        @updatedAt @map("BATCH_DEFINITION_UPDATED_AT")
  deletedAt         DateTime?       @map("BATCH_DEFINITION_DELETED_AT")
  batchInstanceList BatchInstance[]

  @@map("BATCH_DEFINITION")
}

model BatchInstance {
  no                Int       @id @default(autoincrement()) @map("BATCH_INSTANCE_NO")
  batchDefinitionNo Int       @map("BATCH_DEFINITION_NO")
  state             String    @map("BATCH_INSTANCE_STATE")
  createdAt         DateTime  @default(now()) @map("BATCH_INSTANCE_CREATED_AT")
  updatedAt         DateTime? @updatedAt @map("BATCH_INSTANCE_UPDATED_AT")
  startedAt         DateTime? @map("BATCH_INSTANCE_STARTED_AT")
  finishedAt        DateTime? @map("BATCH_INSTANCE_FINISHED_AT")
  elapsedTime       Int?      @map("BATCH_INSTANCE_ELAPSED_TIME")
  data              Json?     @map("BATCH_INSTANCE_DATA")
  errorCode         String?   @map("BATCH_INSTANCE_ERROR_CODE")
  errorMessage      String?   @map("BATCH_INSTANCE_ERROR_MESSAGE") @db.VarChar(4000)

  batchDefinition BatchDefinition @relation(fields: [batchDefinitionNo], references: [no])

  @@index([batchDefinitionNo, no])
  @@map("BATCH_INSTANCE")
}

model JobDefinition {
  no          Int       @id @default(autoincrement()) @map("JOB_DEFINITION_NO")
  name        String    @unique @map("JOB_DEFINITION_NAME")
  description String    @map("JOB_DEFINITION_DESCRIPTION") @db.Text()
  createdAt   DateTime  @default(now()) @map("JOB_DEFINITION_CREATED_AT")
  updatedAt   DateTime  @updatedAt @map("JOB_DEFINITION_UPDATED_AT")
  stepList    JobStep[]

  @@index([name])
  @@map("JOB_DEFINITION")
}

model JobStep {
  no          Int      @id @default(autoincrement()) @map("JOB_STEP_NO")
  order       Int      @map("JOB_STEP_ORDER")
  name        String   @map("JOB_STEP_NAME")
  description String   @map("JOB_STEP_DESCRIPTION") @db.Text()
  createdAt   DateTime @default(now()) @map("JOB_STEP_CREATED_AT")
  updatedAt   DateTime @updatedAt @map("JOB_STEP_UPDATED_AT")

  jobDefinitionNo Int           @map("JOB_DEFINITION_NO")
  jobDefinition   JobDefinition @relation(fields: [jobDefinitionNo], references: [no])

  @@index([jobDefinitionNo, order])
  @@map("JOB_STEP")
}

model JobInstance {
  no              Int       @id @default(autoincrement()) @map("JOB_NO")
  uuid            String    @map("JOB_UUID")
  name            String    @map("JOB_NAME")
  step            String    @map("JOB_STEP")
  batchInstanceNo Int?      @map("BATCH_INSTANCE_NO")
  createdAt       DateTime  @default(now()) @map("JOB_CREATED_AT")
  updatedAt       DateTime  @updatedAt @map("JOB_UPDATED_AT")
  startedAt       DateTime  @map("JOB_STARTED_AT")
  finishedAt      DateTime? @map("JOB_FINISHED_AT")
  elapsedTime     Int?      @map("JOB_ELAPSED_TIME")
  state           String    @map("JOB_STATE")
  request         Json?     @map("JOB_REQUEST")
  result          Json?     @map("JOB_RESULT")
  errorCode       String?   @map("JOB_ERROR_CODE")
  errorMessage    String?   @map("JOB_ERROR_MESSAGE") @db.VarChar(4000)

  @@unique([uuid, name])
  @@index([uuid, name])
  @@index([batchInstanceNo])
  @@index([startedAt])
  @@index([finishedAt])
  @@map("JOB_INSTANCE")
}

model TodayProblem {
  no          Int       @id @default(autoincrement()) @map("TODAY_PROBLEM_NO")
  problemUuid String    @map("TODAY_PROBLEM_UUID") @db.VarChar(36)
  createdAt   DateTime  @default(now()) @map("TODAY_PROBLEM_CREATED_AT")
  updatedAt   DateTime  @updatedAt @map("TODAY_PROBLEM_UPDATED_AT")
  servedAt    DateTime  @map("TODAY_PROBLEM_SERVED_AT")
  problemV2   ProblemV2 @relation(fields: [problemUuid], references: [uuid])

  @@index([createdAt])
  @@index([servedAt])
  @@index([problemUuid])
  @@map("TODAY_PROBLEM")
}

model ProblemV2 {
  no                Int     @id @default(autoincrement()) @map("PROBLEM_V2_NO")
  uuid              String  @unique @default(uuid()) @map("PROBLEM_V2_UUID") @db.VarChar(36)
  title             String  @map("PROBLEM_V2_TITLE") @db.VarChar(1000)
  level             Int     @map("PROBLEM_V2_LEVEL")
  levelText         String  @map("PROBLEM_V2_LEVEL_TEXT")
  answerRate        Float   @map("PROBLEM_V2_ANSWER_RATE")
  submitCount       Int     @map("PROBLEM_V2_SUBMIT_COUNT")
  timeout           Int     @map("PROBLEM_V2_TIMEOUT")
  memoryLimit       Int     @map("PROBLEM_V2_MEMORY_LIMIT")
  answerCount       Int     @map("PROBLEM_V2_ANSWER_COUNT")
  answerPeopleCount Int     @map("PROBLEM_V2_ANSWER_PEOPLE_COUNT")
  source            String  @map("PROBLEM_V2_SOURCE") @db.VarChar(255)
  sourceUrl         String  @map("PROBLEM_V2_SOURCE_URL") @db.VarChar(255)
  sourceId          String  @map("PROBLEM_V2_SOURCE_ID") @db.VarChar(255)
  content           String  @map("PROBLEM_V2_CONTENT") @db.Text()
  limit             String? @map("PROBLEM_V2_LIMIT") @db.Text()
  hint              String? @map("PROBLEM_V2_HINT") @db.Text()
  subTask           String? @map("PROBLEM_V2_SUB_TASK") @db.Text()
  input             String? @map("PROBLEM_V2_INPUT") @db.Text()
  output            String? @map("PROBLEM_V2_OUTPUT") @db.Text()
  protocol          String? @map("PROBLEM_V2_PROTOCOL") @db.Text()
  etc               String? @map("PROBLEM_V2_ETC") @db.Text()
  style             String? @map("PROBLEM_V2_STYLE") @db.Text()

  additionalTimeAllowed Boolean @default(false) @map("PROBLEM_V2_ADDITIONAL_TIME_ALLOWED")
  isSpecialJudge        Boolean @default(false) @map("PROBLEM_V2_IS_SPECIAL_JUDGE")
  isSubTask             Boolean @default(false) @map("PROBLEM_V2_IS_SUB_TASK")
  isFunction            Boolean @default(false) @map("PROBLEM_V2_IS_FUNCTION")
  isInteractive         Boolean @default(false) @map("PROBLEM_V2_IS_INTERACTIVE")
  isTwoStep             Boolean @default(false) @map("PROBLEM_V2_IS_TWO_STEP")
  isClass               Boolean @default(false) @map("PROBLEM_V2_IS_CLASS")
  isLanguageRestrict    Boolean @default(false) @map("PROBLEM_V2_IS_LANGUAGE_RESTRICTED")

  createdAt         DateTime                 @default(now()) @map("PROBLEM_V2_CREATED_AT")
  updatedAt         DateTime                 @updatedAt @map("PROBLEM_V2_UPDATED_AT")
  inputOutputList   ProblemV2InputOutput[]
  typeList          ProblemV2Type[]
  subTaskList       ProblemV2SubTask[]
  languageLimitList ProblemV2LanguageLimit[]
  todayProblemList  TodayProblem[]

  customExample        String?            @map("PROBLEM_V2_CUSTOM_EXAMPLE") @db.Text()
  customImplementation String?            @map("PROBLEM_V2_CUSTOM_IMPLEMENTATION") @db.Text()
  customGrader         String?            @map("PROBLEM_V2_CUSTOM_GRADER") @db.Text()
  customNotes          String?            @map("PROBLEM_V2_CUSTOM_NOTES") @db.Text()
  customAttachment     String?            @map("PROBLEM_V2_CUSTOM_ATTACHMENT") @db.Text()
  problemSource        String?            @map("PROBLEM_V2_PROBLEM_SOURCE") @db.Text()
  customSample         String?            @map("PROBLEM_V2_CUSTOM_SAMPLE") @db.Text()
  ProblemCode          ProblemCode[]      @relation("ProblemToProblemCode")
  userProblemStateList UserProblemState[] @relation("ProblemToUserProblemState")

  @@unique([source, sourceId])
  @@index([source, sourceId])
  @@index([answerRate])
  @@index([submitCount])
  @@index([level, answerRate])
  @@index([level, submitCount])
  @@map("PROBLEM_V2")
}

model ProblemV2SubTask {
  no          Int       @id @default(autoincrement()) @map("PROBLEM_V2_SUB_TASK_NO")
  problemUuid String    @map("PROBLEM_V2_UUID") @db.VarChar(36)
  order       Int       @map("PROBLEM_V2_SUB_TASK_ORDER")
  title       String    @map("PROBLEM_V2_SUB_TASK_TITLE") @db.VarChar(255)
  content     String    @map("PROBLEM_V2_SUB_TASK_CONTENT") @db.Text()
  problem     ProblemV2 @relation(fields: [problemUuid], references: [uuid], onDelete: Cascade)

  @@map("PROBLEM_V2_SUB_TASK")
}

model ProblemV2Type {
  no          Int       @id @default(autoincrement()) @map("PROBLEM_V2_TYPE_NO")
  name        String    @map("PROBLEM_V2_TYPE_NAME") @db.VarChar(255)
  problem     ProblemV2 @relation(fields: [problemUuid], references: [uuid], onDelete: Cascade)
  problemUuid String    @map("PROBLEM_V2_UUID") @db.VarChar(36)

  @@unique([problemUuid, name])
  @@index([problemUuid])
  @@map("PROBLEM_V2_TYPE")
}

model ProblemV2InputOutput {
  no        Int      @id @default(autoincrement()) @map("PROBLEM_V2_INPUT_OUTPUT_NO")
  order     Int      @map("PROBLEM_V2_INPUT_OUTPUT_ORDER")
  input     String   @map("PROBLEM_V2_INPUT_OUTPUT_INPUT") @db.VarChar(8000)
  output    String   @map("PROBLEM_V2_INPUT_OUTPUT_OUTPUT") @db.VarChar(8000)
  content   String?  @map("PROBLEM_V2_INPUT_OUTPUT_CONTENT") @db.Text()
  createdAt DateTime @default(now()) @map("PROBLEM_V2_INPUT_OUTPUT_CREATED_AT")
  updatedAt DateTime @updatedAt @map("PROBLEM_V2_INPUT_OUTPUT_UPDATED_AT")

  problemUuid String    @map("PROBLEM_V2_UUID") @db.VarChar(36)
  problem     ProblemV2 @relation(fields: [problemUuid], references: [uuid], onDelete: Cascade)

  @@index([problemUuid])
  @@map("PROBLEM_V2_INPUT_OUTPUT")
}

model ProblemV2LanguageLimit {
  no          Int       @id @default(autoincrement()) @map("PROBLEM_V2_LANGUAGE_LIMIT_NO")
  problemUuid String    @map("PROBLEM_V2_UUID") @db.VarChar(36)
  language    String    @map("PROBLEM_V2_LANGUAGE_LIMIT_LANGUAGE") @db.VarChar(255)
  problem     ProblemV2 @relation(fields: [problemUuid], references: [uuid], onDelete: Cascade)

  @@map("PROBLEM_V2_LANGUAGE_LIMIT")
}

model User {
  no             Int      @id @default(autoincrement()) @map("USER_NO")
  uuid           String   @unique @default(uuid()) @map("USER_UUID")
  email          String   @map("USER_EMAIL")
  name           String   @map("USER_NAME")
  profilePhoto   String   @map("USER_PROFILE_PHOTO")
  registeredDate DateTime @default(now()) @map("USER_REGISTERED_DATE")
  lastLoginDate  DateTime @map("USER_LAST_LOGIN_DATE")
  state          String?  @default("ACTIVE") @map("USER_STATE")
  emailVerified  Boolean  @default(false) @map("USER_EMAIL_VERIFIED")

  createdAt DateTime @default(now()) @map("USER_CREATED_AT")
  updatedAt DateTime @default(now()) @map("USER_UPDATED_AT")
  loginedAt DateTime @default(now()) @map("USER_LOGINED_AT")

  socialList               UserSocial[]           @relation("UserToUserSocial")
  oauthList                UserOAuth[]            @relation("UserToUserOauth")
  problemStateList         UserProblemState[]     @relation("UserToUserProblemState")
  problemReportList        ProblemReport[]        @relation("UserToProblemReport")
  problemCollectionLogList ProblemCollectionLog[] @relation("UserToProblemCollectionLog")
  problemCodeList          ProblemCode[]          @relation("UserToProblemCode")
  userLoginHistoryList     UserLoginHistory[]     @relation("UserToUserLoginHistory")
  userSessionList          UserSession[]          @relation("UserToUserSession")
  userRoleList             UserRole[]             @relation("UserToUserRole")
  problemSiteAccountList   ProblemSiteAccount[]   @relation("UserToProblemSiteAccount")

  @@map("USER")
}

model UserRole {
  no        Int      @id @default(autoincrement()) @map("USER_ROLE_NO")
  userUuid  String   @map("USER_UUID")
  role      String   @map("USER_ROLE_ROLE")
  createdAt DateTime @default(now()) @map("USER_ROLE_CREATED_AT")
  updatedAt DateTime @default(now()) @updatedAt @map("USER_ROLE_UPDATED_AT")

  User User @relation("UserToUserRole", fields: [userUuid], references: [uuid])

  @@map("USER_ROLE")
}

model UserLoginHistory {
  no        Int      @id @default(autoincrement()) @map("USER_LOGIN_HISTORY_NO")
  userUuid  String   @map("USER_UUID")
  type      String   @map("USER_LOGIN_HISTORY_TYPE")
  ip        String   @map("USER_LOGIN_HISTORY_IP")
  userAgent String?  @map("USER_LOGIN_HISTORY_USER_AGENT")
  createdAt DateTime @default(now()) @map("USER_LOGIN_HISTORY_CREATED_AT")
  updatedAt DateTime @default(now()) @updatedAt @map("USER_LOGIN_HISTORY_UPDATED_AT")

  User User @relation("UserToUserLoginHistory", fields: [userUuid], references: [uuid])

  @@index([userUuid, createdAt])
  @@index([createdAt])
  @@map("USER_LOGIN_HISTORY")
}

model UserSession {
  no           Int      @id @default(autoincrement()) @map("USER_SESSION_NO")
  userUuid     String   @map("USER_UUID")
  deviceId     String   @map("USER_SESSION_DEVICE_ID")
  refreshToken String   @map("USER_SESSION_REFRESH_TOKEN")
  createdAt    DateTime @default(now()) @map("USER_SESSION_CREATED_AT")
  updatedAt    DateTime @updatedAt @map("USER_SESSION_UPDATED_AT")

  User User @relation("UserToUserSession", fields: [userUuid], references: [uuid])

  @@index([userUuid])
  @@map("USER_SESSION")
}

model UserOAuth {
  userUuid  String   @map("USER_UUID")
  provider  String   @map("USER_OAUTH_PROVIDER")
  id        String   @map("USER_OAUTH_ID")
  isActive  Boolean  @default(true) @map("USER_OAUTH_IS_ACTIVE")
  createdAt DateTime @default(now()) @map("USER_OAUTH_CREATED_AT")
  updatedAt DateTime @default(now()) @map("USER_OAUTH_UPDATED_AT")

  User User @relation("UserToUserOauth", fields: [userUuid], references: [uuid])

  @@unique([userUuid, id, provider])
  @@unique([id, provider])
  @@index([userUuid])
  @@index([id, provider])
  @@map("USER_OAUTH")
}

model UserSocial {
  provider  String   @map("USER_SOCIAL_PROVIDER")
  userUuid  String   @map("USER_UUID")
  content   String   @map("USER_SOCIAL_CONTENT")
  createdAt DateTime @default(now()) @map("USER_SOCIAL_CREATED_AT")
  updatedAt DateTime @default(now()) @map("USER_SOCIAL_UPDATED_AT")

  User User @relation("UserToUserSocial", fields: [userUuid], references: [uuid])

  @@unique([userUuid, provider])
  @@index([userUuid, provider])
  @@map("USER_SOCIAL")
}

model Problem {
  no                Int      @id @default(autoincrement()) @map("PROBLEM_NO")
  uuid              String   @unique @default(uuid()) @map("PROBLEM_UUID")
  isSpecialJudge    Boolean  @default(false) @map("PROBLEM_IS_SPECIAL_JUDGE")
  source            String   @map("PROBLEM_SOURCE")
  sourceId          String   @map("PROBLEM_SOURCE_ID")
  sourceUrl         String   @map("PROBLEM_SOURCE_URL")
  title             String   @map("PROBLEM_TITLE")
  level             Int      @map("PROBLEM_LEVEL")
  levelText         String   @map("PROBLEM_LEVEL_TEXT")
  registeredDate    DateTime @default(now()) @map("PROBLEM_REGISTERED_DATE")
  updatedDate       DateTime @map("PROBLEM_UPDATED_DATE")
  input             String   @map("PROBLEM_INPUT") @db.VarChar(600)
  output            String   @map("PROBLEM_OUTPUT") @db.VarChar(600)
  hint              String   @default("") @map("PROBLEM_HINT") @db.VarChar(600)
  limit             String   @map("PROBLEM_LIMIT") @db.VarChar(600)
  answerCount       Int      @map("PROBLEM_ANSWER_COUNT")
  answerRate        Int      @default(0) @map("PROBLEM_ANSWER_RATE")
  answerPeopleCount Int      @map("PROBLEM_ANSWER_PEOPLE_COUNT")
  submitCount       Int      @map("PROBLEM_SUBMIT_COUNT")
  timeout           Int      @map("PROBLEM_TIMEOUT")
  memoryLimit       Int      @map("PROBLEM_MEMORY_LIMIT")

  createdAt DateTime @default(now()) @map("PROBLEM_CREATED_AT")
  updatedAt DateTime @default(now()) @map("PROBLEM_UPDATED_AT")

  typeList          ProblemType[]        @relation("ProblemToProblemType")
  contentList       ProblemContent[]     @relation("ProblemToProblemContent")
  inputOutputList   ProblemInputOutput[] @relation("ProblemToProblemInputOutput")
  problemReportList ProblemReport[]      @relation("ProblemToProblemReport")

  @@unique([source, sourceId])
  @@index([source, sourceId])
  @@map("PROBLEM")
}

model ProblemContent {
  content   String               @map("PROBLEM_CONTENT") @db.VarChar(1000)
  type      String               @map("PROBLEM_CONTENT_TYPE")
  order     Int                  @map("PROBLEM_CONTENT_ORDER")
  problemNo Int                  @map("PROBLEM_NO")
  Problem   Problem              @relation("ProblemToProblemContent", fields: [problemNo], references: [no], onUpdate: Cascade, onDelete: Cascade)
  cellList  ProblemContentCell[] @relation("ProblemContentToProblemContentCell")

  @@unique([problemNo, order])
  @@index([problemNo, order])
  @@map("PROBLEM_CONTENT")
}

model ProblemContentCell {
  no                  Int            @id @default(autoincrement()) @map("PROBLEM_CONTENT_CELL_NO")
  isHeader            Boolean        @default(false) @map("PROBLEM_CONTENT_CELL_IS_HEADER")
  content             String         @map("PROBLEM_CONTENT_CELL_CONTENT") @db.VarChar(1000)
  rowIndex            Int            @map("PROBLEM_CONTENT_CELL_ROW_INDEX")
  colIndex            Int            @map("PROBLEM_CONTENT_CELL_COL_INDEX")
  problemNo           Int            @map("PROBLEM_NO")
  problemContentOrder Int            @map("PROBLEM_CONTENT_ORDER")
  ProblemContent      ProblemContent @relation("ProblemContentToProblemContentCell", fields: [problemNo, problemContentOrder], references: [problemNo, order], onUpdate: Cascade, onDelete: Cascade)

  @@unique([problemNo, problemContentOrder, no])
  @@index([problemNo, problemContentOrder, no])
  @@map("PROBLEM_CONTENT_CELL")
}

model ProblemType {
  name      String  @map("PROBLEM_TYPE_NAME")
  problemNo Int     @map("PROBLEM_NO")
  problem   Problem @relation("ProblemToProblemType", fields: [problemNo], references: [no], onUpdate: Cascade, onDelete: Cascade)

  @@unique([problemNo, name])
  @@index([problemNo, name])
  @@map("PROBLEM_TYPE")
}

model ProblemInputOutput {
  problemNo Int     @map("PROBLEM_NO")
  order     Int     @map("PROBLEM_INPUT_OUTPUT_ORDER")
  input     String  @map("PROBLEM_INPUT") @db.VarChar(4000)
  output    String  @map("PROBLEM_OUTPUT") @db.VarChar(4000)
  Problem   Problem @relation("ProblemToProblemInputOutput", fields: [problemNo], references: [no], onUpdate: Cascade, onDelete: Cascade)

  @@unique([problemNo, order])
  @@index([problemNo])
  @@map("PROBLEM_INPUT_OUTPUT")
}

model UserProblemState {
  userUuid    String @map("USER_UUID")
  problemUuid String @map("PROBLEM_UUID")
  state       String @default("NOT_STARTED") @map("STATE") // NOT_STARTED, IN_PROGRESS, SOLVED, GAVE_UP

  // 최소한의 메타데이터
  solvedAt  DateTime? @map("SOLVED_AT")
  createdAt DateTime  @default(now()) @map("CREATED_AT")
  updatedAt DateTime  @updatedAt @map("UPDATED_AT")

  // 관계
  User      User      @relation("UserToUserProblemState", fields: [userUuid], references: [uuid])
  ProblemV2 ProblemV2 @relation("ProblemToUserProblemState", fields: [problemUuid], references: [uuid])

  @@unique([userUuid, problemUuid])
  @@index([userUuid])
  @@index([problemUuid])
  @@index([state])
  @@map("USER_PROBLEM_STATE")
}

model ProblemReport {
  userNo    Int
  problemNo Int
  no        Int                @id @default(autoincrement()) @map("PROBLEM_REPORT_NO")
  title     String             @map("PROBLEM_REPORT_TITLE") @db.VarChar(600)
  content   String             @map("PROBLEM_REPORT_CONTENT") @db.VarChar(2000)
  createdAt DateTime           @default(now())
  state     ProblemReportState

  User    User    @relation("UserToProblemReport", fields: [userNo], references: [no])
  Problem Problem @relation("ProblemToProblemReport", fields: [problemNo], references: [no])

  @@index([userNo, problemNo, no])
}

enum ProblemReportState {
  PENDING
  PROGRESS
  RESOLVED
  REJECT
}

model ProblemCollectionLog {
  no        Int      @id @default(autoincrement()) @map("PROBLEM_COLLECTION_LOG_NO")
  userNo    Int      @map("USER_NO")
  createdAt DateTime @default(now()) @map("PROBLEM_COLLECTION_LOG_CREATED_AT")
  url       String   @map("PROBLEM_COLLECTION_LOG_URL") @db.VarChar(600)
  state     String   @map("PROBLEM_COLLECTION_LOG_STATE")
  cause     String?  @map("PROBLEM_COLLECTION_LOG_CAUSE")
  User      User     @relation("UserToProblemCollectionLog", fields: [userNo], references: [no])

  @@index([createdAt])
  @@index([userNo, createdAt])
}

model CodeSetting {
  no                 Int      @id @default(autoincrement()) @map("USER_CODE_SETTING_NO")
  userUuid           String   @map("USER_UUID")
  fontSize           Int      @default(14) @map("CODE_FONT_SIZE")
  problemContentRate Int      @default(100) @map("CODE_PROBLEM_CONTENT_RATE")
  theme              String   @default("vs-dark") @map("CODE_THEME")
  tabSize            Int      @default(4) @map("CODE_TAB_SIZE")
  lineNumber         String   @default("on") @map("CODE_LINE_NUMBER")
  defaultLanguage    String   @default("cpp") @map("CODE_DEFAULT_LANGUAGE")
  createdAt          DateTime @default(now()) @map("CODE_SETTING_CREATED_AT")
  updatedAt          DateTime @default(now()) @map("CODE_SETTING_UPDATED_AT")

  @@unique([userUuid])
  @@index([userUuid])
  @@map("CODE_SETTING")
}

model CodeDefaultTemplate {
  no             Int    @id @default(autoincrement()) @map("CODE_DEFAULT_TEMPLATE_NO")
  codeTemplateNo Int    @map("CODE_TEMPLATE_NO")
  userUuid       String @map("USER_UUID")
  language       String @map("CODE_DEFAULT_TEMPLATE_LANGUAGE")

  @@unique([userUuid, language])
  @@index([userUuid])
  @@map("CODE_DEFAULT_TEMPLATE")
}

model CodeTemplate {
  no          Int      @id @default(autoincrement()) @map("CODE_TEMPLATE_NO")
  uuid        String   @unique @default(uuid()) @map("CODE_TEMPLATE_UUID")
  userUuid    String   @map("USER_UUID")
  name        String   @map("CODE_TEMPLATE_NAME")
  language    String   @map("CODE_TEMPLATE_LANGUAGE")
  content     String   @map("CODE_TEMPLATE_CONTENT") @db.VarChar(4000)
  createdAt   DateTime @default(now()) @map("CODE_TEMPLATE_CREATED_AT")
  updatedAt   DateTime @default(now()) @map("CODE_TEMPLATE_UPDATED_AT")
  description String   @map("CODE_TEMPLATE_DESCRIPTION") @db.VarChar(1000)

  @@index([userUuid, language])
  @@map("CODE_TEMPLATE")
}

model ProblemCode {
  no          Int      @id @default(autoincrement()) @map("PROBLEM_CODE_NO")
  userUuid    String   @map("USER_UUID")
  problemUuid String   @map("PROBLEM_UUID")
  language    String   @map("PROBLEM_CODE_LANGUAGE")
  content     String   @map("PROBLEM_CODE_CONTENT") @db.Text()
  createdAt   DateTime @default(now()) @map("PROBLEM_CODE_CREATED_AT")
  updatedAt   DateTime @default(now()) @map("PROBLEM_CODE_UPDATED_AT")

  User    User      @relation("UserToProblemCode", fields: [userUuid], references: [uuid])
  Problem ProblemV2 @relation("ProblemToProblemCode", fields: [problemUuid], references: [uuid])

  @@unique([userUuid, problemUuid, language])
  @@index([userUuid, problemUuid])
  @@index([updatedAt])
  @@map("PROBLEM_CODE")
}

model ProblemSiteAccount {
  no           Int      @id @default(autoincrement()) @map("PROBLEM_SITE_ACCOUNT_NO")
  userUuid     String   @map("USER_UUID")
  provider     String   @map("PROBLEM_SITE_ACCOUNT_PROVIDER")
  handle       String   @map("PROBLEM_SITE_ACCOUNT_HANDLE")
  createdAt    DateTime @default(now()) @map("PROBLEM_SITE_ACCOUNT_CREATED_AT")
  updatedAt    DateTime @default(now()) @updatedAt @map("PROBLEM_SITE_ACCOUNT_UPDATED_AT")
  lastSyncedAt DateTime @default(now()) @map("PROBLEM_SITE_ACCOUNT_LAST_SYNCED_AT")
  solvedCount  Int      @default(0) @map("PROBLEM_SITE_ACCOUNT_SOLVED_COUNT")
  failedCount  Int      @default(0) @map("PROBLEM_SITE_ACCOUNT_FAILED_COUNT")
  rank         String   @default("UNRANKED") @map("PROBLEM_SITE_ACCOUNT_RANK")

  User User @relation("UserToProblemSiteAccount", fields: [userUuid], references: [uuid])

  @@unique([userUuid, provider])
  @@map("PROBLEM_SITE_ACCOUNT")
}
